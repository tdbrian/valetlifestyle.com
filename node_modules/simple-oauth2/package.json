{
  "name": "simple-oauth2",
  "version": "0.1.7",
  "description": "Node.js client for OAuth2",
  "author": {
    "name": "Andrea Reginato",
    "email": "andrea.reginato@gmail.com"
  },
  "homepage": "http://github.com/andreareginato/simple-oauth2",
  "repository": {
    "type": "git",
    "url": "http://github.com/andreareginato/simple-oauth2"
  },
  "engine": {
    "node": "~0.8.x"
  },
  "dependencies": {
    "request": "~2.12.0",
    "querystring": "~0.1.0",
    "date-utils": "~1.2.12"
  },
  "devDependencies": {
    "should": "~1.2.1",
    "mocha": "~1.8.1",
    "nock": "~0.14.3"
  },
  "main": ".",
  "licenses": [
    {
      "type": "Copyright (c) 2013 Lelylan"
    }
  ],
  "readme": "# Simple OAuth2\n\nNode.js client library for [Oauth2](http://oauth.net/2/).\n\nOAuth2 lets users grant the access to the desired resources to third party applications,\ngiving them the possibility to enable and disable those accesses whenever they want.\n\nSimple OAuth2 supports the following flows.\n\n* Authorization Code Flow (for apps with servers that can store persistent information).\n* Password Credentials (when previous flow can't be used or during development).\n\n## Requirements\n\nNode client library is tested against Node ~0.8.x\n\n\n## Installation\n\nInstall the client library using [npm](http://npmjs.org/):\n\n    $ npm install simple-oauth2\n\nInstall the client library using git:\n\n    $ git clone git://github.com/andrearegianto/simple-oauth2.git\n    $ cd simple-oauth2\n    $ npm install\n\n\n## Getting started\n\n### Authorization Code flow\n\nThe Authorization Code flow is made up from two parts. At first your application asks to\nthe user the permission to access their data. If the user approves the OAuth2 server sends\nto the client an authorization code. In the second part, the client POST the authorization code\nalong with its client secret to the Lelylan in order to get the access token.\n\n```javascript\n// Set the client credentials and the OAuth2 server\nvar credentials = {\n  clientID: '<client-id>',\n  clientSecret: '<client-secret>',\n  site: 'https://api.oauth.com'\n};\n\n// Initialize the OAuth2 Library\nvar OAuth2 = require('simple-oauth2')(credentials);\n\n// Authorization OAuth2 URI\nvar authorization_uri = OAuth2.AuthCode.authorizeURL({\n  redirect_uri: 'http://localhost:3000/callback',\n  scope: '<scope>',\n  state: '<state>'\n});\n\n// Redirect example using Express (see http://expressjs.com/api.html#res.redirect)\nres.redirect(authorization_uri);\n\n// Get the access token object (the authorization code is given from the previous step).\nvar token;\nOAuth2.AuthCode.getToken({\n  code: '<code>',\n  redirect_uri: 'http://localhost:3000/callback'\n}, saveToken);\n\n// Save the access token\nfunction saveToken(error, result) {\n  if (error) { console.log('Access Token Error', error.message); }\n  token = OAuth2.AccessToken.create(result);\n});\n```\n\n\n### Password Credentials Flow\n\nThis flow is suitable when the resource owner has a trust relationship with the\nclient, such as its computer operating system or a highly privileged application.\nUse this flow only when other flows are not viable or when you need a fast way to\ntest your application.\n\n```javascript\n// Get the access token object.\nvar token;\nOAuth2.Password.getToken({\n  username: 'username',\n  password: 'password'Â \n}, saveToken);\n\n// Save the access token\nfunction saveToken(error, result) {\n  if (error) { console.log('Access Token Error', error.message); }\n  token = OAuth2.AccessToken.create(result);\n});\n```\n\n### Access Token object\n\nWhen a token expires we need to refresh it. Simple OAuth2 offers the\nAccessToken class that add a couple of useful methods to refresh the\naccess token when it is expired.\n\n```javascript\n// Sample of a JSON access token (you got it through previous steps)\nvar token = {\n  'access_token': '<access-token>',\n  'refresh_token': '<refresh-token>',\n  'expires_in': '7200'\n};\n\n// Create the access token wrapper\nvar token = OAuth2.AccessToken.create(token);\n\n// Check if the token is expired. If expired it is refreshed.\nif (token.expired()) {\n  token.refresh(function(error, result) {\n    token = result;\n  })\n}\n```\n\n\n### Errors\n\nExceptions are raised when a 4xx or 5xx status code is returned.\n\n    HTTPError\n\nThrough the error message attribute you can access the JSON representation\nbased on HTTP `status` and error `message`.\n\n```javascript\nOAuth2.AuthCode.getToken(function(error, token) {\n  if (error) { console.log(error.message); }\n});\n// => { \"status\": \"401\", \"message\": \"Unauthorized\" }\n```\n\n\n### Configurations\n\nSimple OAuth2 accepts an object with the following valid params.\n\n* `clientID` - Required registered Client ID.\n* `clientSecret` - Required registered Client secret.\n* `site` - Required OAuth2 server site.\n* `authorizationPath` - Authorization path for the OAuth2 server.\nSimple OAuth2 uses `/oauth/authorize` as default\n* `tokenPath` - Access token path for the OAuth2 server.\nSimple OAuth2 uses `/oauth/token` as default.\n\n```javascript\n// Set the configuration settings\nvar credentials = {\n  clientID: '<client-id>',\n  clientSecret: '<client-secret>',\n  site: 'https://www.oauth2.com',\n  authorizationPath: '/oauth2/authorization',\n  tokenPath: '/oauth2/access_token'\n};\n\n// Initialize the OAuth2 Library\nvar OAuth2 = require('simple-oauth2')(credentials);\n```\n\n\n## Contributing\n\nFork the repo on github and send a pull requests with topic branches. Do not forget to\nprovide specs to your contribution.\n\n\n### Running specs\n\n* Fork and clone the repository (`dev` branch).\n* Run `npm install` for dependencies.\n* Run `make test` to execute all specs.\n* Run `make test-watch` to auto execute all specs when a file change.\n\n\n## Coding guidelines\n\nFollow [github](https://github.com/styleguide/) guidelines.\n\n\n## Feedback\n\nUse the [issue tracker](http://github.com/andreareginato/simple-oauth2/issues) for bugs.\n[Mail](mailto:andrea.reginato@.gmail.com) or [Tweet](http://twitter.com/andreareginato) us\nfor any idea that can improve the project.\n\n\n## Links\n\n* [GIT Repository](http://github.com/andreareginato/simple-oauth2)\n* [Documentation](http://andreareginato.github.com/simple-oauth2)\n\n\n## Authors\n\n[Andrea Reginato](http://twitter.com/andreareginato)\n\n\n## Contributors\n\nSpecial thanks to the following people for submitting patches.\n\n\n## Changelog\n\nSee [CHANGELOG](https://github.com/andreareginato/simple-oauth2/blob/master/CHANGELOG.md)\n\n\n## Copyright\n\nCopyright (c) 2013 [Lelylan](http://lelylan.com).\nSee [LICENSE](https://github.com/andreareginato/simple-oauth2/blob/master/LICENSE.md) for details.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andreareginato/simple-oauth2/issues"
  },
  "_id": "simple-oauth2@0.1.7",
  "dist": {
    "shasum": "b5266b58be56bbd5350d753619f5e149a5b6ac0c"
  },
  "_from": "simple-oauth2@",
  "_resolved": "https://registry.npmjs.org/simple-oauth2/-/simple-oauth2-0.1.7.tgz"
}
